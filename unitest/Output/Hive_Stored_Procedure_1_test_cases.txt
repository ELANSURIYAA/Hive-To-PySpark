# Unit Test Cases for Hive_Stored_Procedure_1.py
# PySpark Sales Data Processing Pipeline

## Test Case Categories

### 1. SPARK SESSION MANAGEMENT TESTS

**Test Case ID:** TC_SPARK_001
**Description:** Test successful Spark session creation with valid app name
**Expected Outcome:** SparkSession object created with correct app name and optimized configurations

**Test Case ID:** TC_SPARK_002
**Description:** Test Spark session creation with empty app name
**Expected Outcome:** SparkSession created with default or empty app name

**Test Case ID:** TC_SPARK_003
**Description:** Test Spark session configuration settings
**Expected Outcome:** Verify SQL adaptive query execution, adaptive coalescing, and other optimization settings are properly configured

### 2. DATE VALIDATION TESTS

**Test Case ID:** TC_DATE_001
**Description:** Test valid date format validation (YYYY-MM-DD)
**Expected Outcome:** Function returns True for valid date strings like '2023-01-15'

**Test Case ID:** TC_DATE_002
**Description:** Test invalid date format validation (MM/DD/YYYY)
**Expected Outcome:** Function returns False for invalid date formats like '01/15/2023'

**Test Case ID:** TC_DATE_003
**Description:** Test invalid date format validation (DD-MM-YYYY)
**Expected Outcome:** Function returns False for invalid date formats like '15-01-2023'

**Test Case ID:** TC_DATE_004
**Description:** Test empty string date validation
**Expected Outcome:** Function returns False for empty string input

**Test Case ID:** TC_DATE_005
**Description:** Test None value date validation
**Expected Outcome:** Function handles None input gracefully and returns False

**Test Case ID:** TC_DATE_006
**Description:** Test invalid date values (February 30th)
**Expected Outcome:** Function returns False for impossible dates like '2023-02-30'

**Test Case ID:** TC_DATE_007
**Description:** Test leap year date validation
**Expected Outcome:** Function returns True for valid leap year dates like '2024-02-29'

### 3. SAMPLE DATA CREATION TESTS

**Test Case ID:** TC_SAMPLE_001
**Description:** Test sample data creation with valid Spark session
**Expected Outcome:** DataFrame created with correct schema (product_id: String, sales: Float, sale_date: Date)

**Test Case ID:** TC_SAMPLE_002
**Description:** Test sample data content validation
**Expected Outcome:** DataFrame contains expected number of rows and proper data types

**Test Case ID:** TC_SAMPLE_003
**Description:** Test sample data date range coverage
**Expected Outcome:** Sample data covers multiple dates for comprehensive testing

### 4. MAIN DATA PROCESSING TESTS - HAPPY PATH

**Test Case ID:** TC_PROCESS_001
**Description:** Test successful sales data processing with valid date range
**Expected Outcome:** Data filtered correctly, grouped by product_id, sales aggregated, and written to output tables

**Test Case ID:** TC_PROCESS_002
**Description:** Test data processing with start_date equals end_date
**Expected Outcome:** Single day data processed correctly

**Test Case ID:** TC_PROCESS_003
**Description:** Test data processing with wide date range
**Expected Outcome:** All data within range processed and aggregated correctly

**Test Case ID:** TC_PROCESS_004
**Description:** Test data processing with optional_paths parameter
**Expected Outcome:** Function processes data from specified paths when provided

### 5. DATA FILTERING AND AGGREGATION TESTS

**Test Case ID:** TC_FILTER_001
**Description:** Test date range filtering functionality
**Expected Outcome:** Only records within specified date range are included in results

**Test Case ID:** TC_FILTER_002
**Description:** Test groupBy product_id functionality
**Expected Outcome:** Data correctly grouped by product_id with no duplicate product entries

**Test Case ID:** TC_AGG_001
**Description:** Test sales sum aggregation accuracy
**Expected Outcome:** Sales values correctly summed for each product_id

**Test Case ID:** TC_AGG_002
**Description:** Test aggregation with single product multiple sales
**Expected Outcome:** Multiple sales records for same product correctly summed

**Test Case ID:** TC_AGG_003
**Description:** Test aggregation with multiple products
**Expected Outcome:** Each product_id has separate aggregated total

### 6. EDGE CASE TESTS

**Test Case ID:** TC_EDGE_001
**Description:** Test processing with empty DataFrame
**Expected Outcome:** Function handles empty input gracefully without errors

**Test Case ID:** TC_EDGE_002
**Description:** Test processing with no records in date range
**Expected Outcome:** Empty result DataFrame with correct schema

**Test Case ID:** TC_EDGE_003
**Description:** Test processing with single record
**Expected Outcome:** Single record processed correctly

**Test Case ID:** TC_EDGE_004
**Description:** Test processing with null sales values
**Expected Outcome:** Null sales values handled appropriately (excluded or treated as zero)

**Test Case ID:** TC_EDGE_005
**Description:** Test processing with null product_id values
**Expected Outcome:** Null product_id values handled appropriately

**Test Case ID:** TC_EDGE_006
**Description:** Test processing with boundary dates (start of year, end of year)
**Expected Outcome:** Boundary dates processed correctly

**Test Case ID:** TC_EDGE_007
**Description:** Test processing with very large dataset
**Expected Outcome:** Large dataset processed efficiently without memory issues

### 7. ERROR HANDLING TESTS

**Test Case ID:** TC_ERROR_001
**Description:** Test processing with invalid start_date format
**Expected Outcome:** Appropriate error handling or validation failure

**Test Case ID:** TC_ERROR_002
**Description:** Test processing with invalid end_date format
**Expected Outcome:** Appropriate error handling or validation failure

**Test Case ID:** TC_ERROR_003
**Description:** Test processing with start_date > end_date
**Expected Outcome:** Logical error handled appropriately

**Test Case ID:** TC_ERROR_004
**Description:** Test processing with None Spark session
**Expected Outcome:** Function handles None SparkSession gracefully

**Test Case ID:** TC_ERROR_005
**Description:** Test processing with corrupted input data
**Expected Outcome:** Data quality issues handled without crashing

### 8. DATA VALIDATION TESTS

**Test Case ID:** TC_VALID_001
**Description:** Test output DataFrame schema validation
**Expected Outcome:** Output DataFrame has expected schema (product_id: String, total_sales: Float/Double)

**Test Case ID:** TC_VALID_002
**Description:** Test output data completeness
**Expected Outcome:** All expected products present in output

**Test Case ID:** TC_VALID_003
**Description:** Test output data accuracy
**Expected Outcome:** Aggregated values match manual calculations

**Test Case ID:** TC_VALID_004
**Description:** Test no duplicate product_ids in output
**Expected Outcome:** Each product_id appears only once in final results

### 9. PERFORMANCE AND MEMORY TESTS

**Test Case ID:** TC_PERF_001
**Description:** Test DataFrame caching effectiveness
**Expected Outcome:** Cached DataFrames improve performance on repeated operations

**Test Case ID:** TC_PERF_002
**Description:** Test memory usage with large datasets
**Expected Outcome:** Memory usage remains within acceptable limits

**Test Case ID:** TC_PERF_003
**Description:** Test processing time for various data sizes
**Expected Outcome:** Processing time scales reasonably with data size

### 10. OUTPUT WRITING TESTS

**Test Case ID:** TC_OUTPUT_001
**Description:** Test writing to summary_table
**Expected Outcome:** Data successfully written to summary table with correct format

**Test Case ID:** TC_OUTPUT_002
**Description:** Test writing to detailed_sales_summary table
**Expected Outcome:** Data successfully written to detailed summary table

**Test Case ID:** TC_OUTPUT_003
**Description:** Test overwrite mode for output tables
**Expected Outcome:** Existing data properly overwritten

**Test Case ID:** TC_OUTPUT_004
**Description:** Test append mode for output tables
**Expected Outcome:** New data properly appended to existing tables

### 11. INTEGRATION TESTS

**Test Case ID:** TC_INTEG_001
**Description:** Test end-to-end pipeline with realistic data
**Expected Outcome:** Complete pipeline executes successfully from input to output

**Test Case ID:** TC_INTEG_002
**Description:** Test main() function execution
**Expected Outcome:** Main demonstration function runs without errors

**Test Case ID:** TC_INTEG_003
**Description:** Test pipeline with multiple date ranges
**Expected Outcome:** Different date ranges produce expected different results

### 12. DATA TYPE AND SCHEMA TESTS

**Test Case ID:** TC_SCHEMA_001
**Description:** Test input data schema validation
**Expected Outcome:** Input DataFrame schema matches expected format

**Test Case ID:** TC_SCHEMA_002
**Description:** Test data type conversions during processing
**Expected Outcome:** Data types properly maintained or converted as needed

**Test Case ID:** TC_SCHEMA_003
**Description:** Test handling of different numeric types for sales
**Expected Outcome:** Integer, float, and double sales values processed correctly

### TOTAL TEST CASES: 50

## Test Execution Priority:
1. **High Priority:** TC_SPARK_001, TC_DATE_001-007, TC_PROCESS_001-004, TC_FILTER_001-002, TC_AGG_001-003
2. **Medium Priority:** TC_EDGE_001-007, TC_ERROR_001-005, TC_VALID_001-004
3. **Low Priority:** TC_PERF_001-003, TC_OUTPUT_001-004, TC_INTEG_001-003, TC_SCHEMA_001-003

## Coverage Areas:
- Function-level testing: 100% of functions covered
- Branch coverage: All conditional logic paths tested
- Data validation: Input/output validation covered
- Error handling: Exception scenarios covered
- Performance: Memory and execution time considerations
- Integration: End-to-end pipeline testing